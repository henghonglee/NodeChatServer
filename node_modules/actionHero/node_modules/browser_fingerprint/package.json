{
  "author": {
    "name": "Evan Tahler",
    "email": "evantahler@gmail.com"
  },
  "name": "browser_fingerprint",
  "description": "Uniquely identify browsers",
  "version": "0.0.3",
  "repository": {
    "type": "git",
    "url": "git://github.com/evantahler/browser_fingerprint.git"
  },
  "main": "./lib/browser_fingerprint.js",
  "keywords": [
    "browser",
    "fingerprint",
    "session",
    "browserFingerprint",
    "browser_fingerprint"
  ],
  "engines": {
    "node": ">=0.6.0"
  },
  "dependencies": {},
  "devDependencies": {},
  "scripts": {
    "start": "./sample/sample.js"
  },
  "readme": "# browser_fingerprint\n\nThis module attempts to uniquely identify browsers by examining their header and connection information.  This information can be used as a \"poor-man's\" session identifier in your node projects. This module can optionally set a cookie to 'lock' in a consistent fingerprint. \n\nResuming sessions require that either the cookie be returned to the server, or a x-header `x-__browserFingerprint` in the default case, be sent on subsequent requests\n\n```javascript\n\tvar http = require('http');\n\tvar bf = require('browser_fingerprint');\n\n\t// these are the default options\n\tvar options = {\n\t\tcookieKey: \"__browserFingerprint\",\n\t\ttoSetCookie: true,\n\t\tonlyStaticElements: false,\n\t};\n\n\thttp.createServer(function (req, res) {\n\t\tbf.fingerprint(req, options, function(fingerprint, elementHash, cookieHash){\n\t\t\t\n\t\t\tcookieHash['Content-Type'] = 'text/plain' // append any other headers you want\n\t\t\tres.writeHead(200, cookieHash);\n\t\t\t\n\t\t\tvar resp = \"\";\n\t\t\tresp += 'Your Browser Fingerprint: ' + fingerprint + \"\\r\\n\\r\\n\";\n\t\t\tfor(var i in elementHash){\n\t\t\t\tresp += \"Element \" + i + \": \" + elementHash[i] + \"\\r\\n\";\n\t\t\t}\n\t\t\t\n\t\t\tres.end(resp);\n\t\t\t\n\t\t\tconsole.log('requset from ' + req.connection.remoteAddress + ', fingerprint -> ' + fingerprint);\n\t\t});\n\t}).listen(8080, '127.0.0.1');\n\n\tconsole.log('Server running at http://127.0.0.1:8080/' + '\\r\\n');\n```",
  "_id": "browser_fingerprint@0.0.3",
  "_from": "browser_fingerprint@0.0.x"
}
