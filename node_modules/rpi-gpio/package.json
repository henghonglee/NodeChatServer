{
  "name": "rpi-gpio",
  "author": {
    "name": "James Barwell",
    "email": "jb@jamesbarwell.co.uk"
  },
  "description": "Control Raspberry Pi GPIO pins with node.js",
  "version": "0.0.3",
  "main": "rpi-gpio.js",
  "keywords:": [
    "raspberry",
    "pi",
    "gpio"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/JamesBarwell/rpi-gpio.js.git"
  },
  "devDependencies": {
    "jasmine-node": "1.0.26"
  },
  "readme": "rpi-gpio.js\n==========\n\n\nControl Raspberry Pi GPIO pins with node.js\n\n## Setup\nSee this guide on how to get [node.js running on Raspberry Pi](http://elsmorian.com/post/23474168753/node-js-on-raspberry-pi).\n\nThis module can be installed with npm:\n```js\nnpm install rpi-gpio\n```\n\n## Usage\nPlease see the examples below. Make make sure you are running as root or with sudo, else the Raspberry Pi will not let you output to the GPIO. All of the functions relating to the pins within this module are asynchronous, so where necessary - for example in reading the value of a pin - a callback must be provided.\n\nPlease note that there are two different ways to reference a channel; either using the Raspberry Pi or the BCM/SoC naming schema (sadly, neither of which match the physical pins!). This module supports both schemas, with Raspberry Pi being the default. Please see [this page](http://elinux.org/RPi_Low-level_peripherals) for more details.\n\n\n### Query the value of a pin\n```js\nvar gpio = require('../rpi-gpio');\n\ngpio.setup(7, gpio.DIR_IN, readInput);\n\nfunction readInput() {\n    gpio.read(7, function(err, value) {\n        console.log('The value is ' + value);\n    });\n}\n```\n\n### Listen for changes on a pin\nThe GPIO module inherits from `EventEmitter` so any of the [EventEmitter functions](http://nodejs.org/api/events.html) can be used. The example below shows how to listen for a change in value to a channel.\n```js\nvar gpio = require('../rpi-gpio');\n\ngpio.on('change', function(channel, value) {\n\tconsole.log('Channel ' + channel + ' value is now ' + value);\n});\ngpio.setup(7, gpio.DIR_IN);\n```\n\n### Write to a pin\n```js\nvar gpio = require('../rpi-gpio');\n\ngpio.setup(7, gpio.DIR_OUT, write);\n\nfunction write() {\n    gpio.write(7, true, function(err) {\n        if (err) throw err;\n        console.log('Written to pin');\n    });\n}\n```\n\n### Voltage cycling a pin\nThis example shows how to set up a channel for output mode. After it is set up, it executes a callback which in turn calls another, causing the voltage to alternate up and down three times.\n```js\nvar gpio = require('../rpi-gpio');\n\nvar pin   = 7,\n    delay = 2000,\n    count = 0,\n    max   = 3;\n\ngpio.on('change', function(channel, value) {\n    console.log('Channel ' + channel + ' value is now ' + value);\n});\ngpio.setup(pin, gpio.DIR_OUT, on);\n\nfunction on() {\n    if (count >= max) {\n        gpio.destroy(function() {\n            console.log('Closed pins, now exit');\n            return process.exit(0);\n        });\n        return;\n    }\n\n    setTimeout(function() {\n        gpio.write(pin, 1, off);\n        count += 1;\n    }, delay);\n}\n\nfunction off() {\n    setTimeout(function() {\n        gpio.write(pin, 0, on);\n    }, delay);\n}\n```\n\n### Using flow control modules\nDue to the asynchronous nature of this module, using an asynchronous flow control module can help to simplify development. This example uses the async module to turn pins on and off in series.\n```js\nvar gpio = require('../rpi-gpio');\nvar async = require('async');\n\ngpio.on('change', function(channel, value) {\n    console.log('Channel ' + channel + ' value is now ' + value);\n});\n\nasync.parallel([\n    function(callback) {\n        gpio.setup(7, gpio.DIR_OUT, callback)\n    },\n    function(callback) {\n        gpio.setup(15, gpio.DIR_OUT, callback)\n    },\n    function(callback) {\n        gpio.setup(16, gpio.DIR_OUT, callback)\n    },\n], function(err, results) {\n    console.log('Pins set up');\n    write();\n});\n\nfunction write() {\n    async.series([\n        function(callback) {\n            delayedWrite(7, true, callback);\n        },\n        function(callback) {\n            delayedWrite(15, true, callback);\n        },\n        function(callback) {\n            delayedWrite(16, true, callback);\n        },\n        function(callback) {\n            delayedWrite(7, false, callback);\n        },\n        function(callback) {\n            delayedWrite(15, false, callback);\n        },\n        function(callback) {\n            delayedWrite(16, false, callback);\n        },\n    ], function(err, results) {\n        console.log('Writes complete, pause then unexport pins');\n        setTimeout(function() {\n            gpio.destroy(function() {\n                console.log('Closed pins, now exit');\n                return process.exit(0);\n            });\n        }, 500);\n    });\n};\n\nfunction delayedWrite(pin, value, callback) {\n    setTimeout(function() {\n        gpio.write(pin, value, callback);\n    }, 500);\n}\n```\n",
  "_id": "rpi-gpio@0.0.3",
  "_from": "rpi-gpio"
}
